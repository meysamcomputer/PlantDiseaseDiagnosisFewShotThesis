import torch
import torch.nn as nn
from transformers import ViTModel

class SiameseNetworkWithViT(nn.Module):
    def __init__(self):
        super(SiameseNetworkWithViT, self).__init__()
        self.vit = ViTModel.from_pretrained('google/vit-base-patch16-224-in21k')
        self.fc1 = nn.Linear(768, 512)
        self.fc2 = nn.Linear(512, 256)
        self.fc3 = nn.Linear(256, 1)
        
    def forward_once(self, x):
        outputs = self.vit(x)
        x = outputs.last_hidden_state[:, 0, :]
        x = self.fc1(x)
        x = nn.ReLU()(x)
        x = self.fc2(x)
        x = nn.ReLU()(x)
        x = self.fc3(x)
        return x
    
    def forward(self, input1, input2):
        output1 = self.forward_once(input1)
        output2 = self.forward_once(input2)
        return output1, output2

# Example usage
model = SiameseNetworkWithViT()
input1 = torch.randn(1, 3, 224, 224)  # Example input
input2 = torch.randn(1, 3, 224, 224)  # Example input
output1, output2 = model(input1, input2)
